#pragma once

#define GFX_EXCEPT_NO_INFO(hr) Graphics::HRException{ __LINE__, WFILE, (hr) }
#define GFX_THROW_NO_INFO(hrcall) if (FAILED(hr = (hrcall))) throw GFX_EXCEPT_NO_INFO(hr) 

#define INFOMAN_SET Graphics::GetInfoManager().Set()
#define INFOMAN_MSGS Graphics::GetInfoManager().GetMessages()

#ifndef NDEBUG // DEBUG MODE MACROS

// exception for functions that return HRESULT error code
// provides translated error code and debug messages if there are any
#define GFX_EXCEPT(hr) Graphics::HRException{ __LINE__, WFILE, (hr), INFOMAN_MSGS }

// throws an exception for functions that return HRESULT error code
// exception provides translated error code and debug messages if there are any
#define GFX_THROW_INFO(hrcall) INFOMAN_SET; if ((hr = (hrcall)) != S_OK) throw GFX_EXCEPT(hr)

// throws an info exception with debug messages generated by 'hrcall' (if there are any)
// for functions that do not return HRESULT error code
#define GFX_THROW_INFO_ONLY(hrcall) INFOMAN_SET; (hrcall); { auto v = INFOMAN_MSGS; if (!v.empty()) throw Graphics::InfoException{ __LINE__, WFILE, v }; }

// same as ordinary HRESULT error code exception (GFX_THROW_INFO), but for 'device removed' error only
#define GFX_DEVICE_REMOVED_EXCEPT(hr) Graphics::DeviceRemovedException{ __LINE__, WFILE, (hr), INFOMAN_MSGS }

#else // RELEASE MODE MACROS:

// exception for functions that return HRESULT error code
// provides translated error code only
// enable debug mode to get debug messages
#define GFX_EXCEPT(hr) Graphics::HRException{ __LINE__, WFILE, (hr) }

// throws an exception for functions that return HRESULT error code
// exception provides translated error code only
// enable debug mode to get debug messages
#define GFX_THROW_INFO(hrcall) GFX_THROW_NO_INFO(hrcall)

// does absolutely nothing in release mode
// enable debug mode to get info exceptions
#define GFX_THROW_INFO_ONLY(hrcall) (hrcall)

// same as ordinary HRESULT error code exception (GFX_THROW_INFO), but for 'device removed' error only
#define GFX_DEVICE_REMOVED_EXCEPT(hr) Graphics::DeviceRemovedException{ __LINE__, WFILE, (hr) }
#endif // NDEBUG